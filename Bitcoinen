import tkinter as tk
from tkinter import scrolledtext, ttk
from threading import Thread
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout
import os
import datetime
import time
import matplotlib.pyplot as plt

file_path = 'File to your bitcoin data'

btc_data = pd.read_csv(file_path, parse_dates=['Date'], index_col='Date')
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(btc_data['Close'].values.reshape(-1, 1))
scaled_data = scaled_data.flatten()

def create_dataset(dataset, time_steps=60):
    X, Y = [], []
    for i in range(len(dataset) - time_steps):
        X.append(dataset[i:i+time_steps])
        Y.append(dataset[i+time_steps])
    return np.array(X), np.array(Y)

def train_model(epochs, model_name, update_text, update_time):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(60, 1)))
    model.add(Dropout(0.2))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=25))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    X, Y = create_dataset(scaled_data, 60)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))

    start_time = time.time()
    model.fit(X, Y, epochs=2, batch_size=32, verbose=0)
    two_epoch_time = time.time() - start_time
    avg_epoch_time = two_epoch_time / 2

    total_time = avg_epoch_time * epochs
    mins, secs = divmod(total_time, 60)
    update_time(f"Estimated total time: {int(mins)}m {int(secs)}s")

    for epoch in range(3, epochs + 1):
        model.fit(X, Y, epochs=1, batch_size=32, verbose=0)
        elapsed_time = time.time() - start_time
        remaining_time = total_time - elapsed_time
        mins, secs = divmod(remaining_time, 60)
        update_time(f"{int(mins)}m {int(secs)}s remaining")
        update_text(f"Epoch {epoch} out of {epochs} done.\n")

    model.save(model_name)
    update_text(f"Training complete. Model '{model_name}' has been saved.\n")
    update_time("Training complete.")

def train_interface():
    train_window = tk.Toplevel()
    train_window.title("Train Model")

    time_label = tk.Label(train_window, text="")
    time_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

    tk.Label(train_window, text="How many epochs:").grid(row=1, column=0, padx=10, pady=10)
    epochs_entry = tk.Entry(train_window)
    epochs_entry.grid(row=1, column=1, padx=10, pady=10)

    tk.Label(train_window, text="Model name:").grid(row=2, column=0, padx=10, pady=10)
    model_name_entry = tk.Entry(train_window)
    model_name_entry.grid(row=2, column=1, padx=10, pady=10)

    train_status_text = scrolledtext.ScrolledText(train_window, height=10)
    train_status_text.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

    def start_training():
        epochs = int(epochs_entry.get())
        model_name = model_name_entry.get() + '.h5'
        Thread(target=train_model, args=(epochs, model_name, 
                                         lambda text: train_status_text.insert(tk.END, text),
                                         lambda time: time_label.config(text=time))).start()

    tk.Button(train_window, text="Start Training", command=start_training).grid(row=3, column=0, columnspan=2, padx=10, pady=10)

def visualize_predictions():
    selected_model = model_combobox.get()
    days = int(days_entry.get())

    if selected_model:
        loaded_model = load_model(selected_model)
        predictions = []
        dates = []

        for i in range(days):
            prediction_date = btc_data.index[-1] + datetime.timedelta(days=i + 1)
            dates.append(prediction_date)
            last_sequence = np.array([scaled_data[-60-i:-i] if i > 0 else scaled_data[-60:]])
            last_sequence = np.reshape(last_sequence, (last_sequence.shape[0], last_sequence.shape[1], 1))
            prediction = loaded_model.predict(last_sequence)
            prediction = scaler.inverse_transform(prediction)[0, 0]
            predictions.append(prediction)

        plt.figure()
        plt.plot(dates, predictions)
        plt.title(f"Bitcoin Price Predictions for Next {days} Days")
        plt.xlabel("Date")
        plt.ylabel("Predicted Price (USD)")
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

def prediction_interface():
    global model_combobox, days_entry
    prediction_window = tk.Toplevel()
    prediction_window.title("Bitcoin Predictions")

    model_combobox = ttk.Combobox(prediction_window)
    model_combobox['values'] = [f for f in os.listdir('.') if f.endswith('.h5')]
    model_combobox.grid(row=0, column=1, padx=10, pady=10)

    tk.Label(prediction_window, text="Choose model:").grid(row=0, column=0, padx=10, pady=10)

    tk.Label(prediction_window, text="Days into future:").grid(row=1, column=0, padx=10, pady=10)
    days_entry = tk.Entry(prediction_window)
    days_entry.grid(row=1, column=1, padx=10, pady=10)

    predictions_tree = ttk.Treeview(prediction_window, columns=('Date', 'Predicted Price'), show='headings')
    predictions_tree.heading('Date', text='Date')
    predictions_tree.heading('Predicted Price', text='Predicted Price (USD)')
    predictions_tree.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

    def make_prediction():
        selected_model = model_combobox.get()
        days = int(days_entry.get())
        predictions_tree.delete(*predictions_tree.get_children())
        if selected_model:
            loaded_model = load_model(selected_model)
            for i in range(days):
                prediction_date = btc_data.index[-1] + datetime.timedelta(days=i + 1)
                last_sequence = np.array([scaled_data[-60-i:-i] if i > 0 else scaled_data[-60:]])
                last_sequence = np.reshape(last_sequence, (last_sequence.shape[0], last_sequence.shape[1], 1))
                prediction = loaded_model.predict(last_sequence)
                prediction = scaler.inverse_transform(prediction)[0, 0]
                predictions_tree.insert('', tk.END, values=(prediction_date.strftime("%Y-%m-%d"), f"${prediction:.2f}"))

    tk.Button(prediction_window, text="Show Predictions", command=make_prediction).grid(row=2, column=0, padx=10, pady=10)
    tk.Button(prediction_window, text="Visualize Predictions", command=visualize_predictions).grid(row=2, column=1, padx=10, pady=10)

root = tk.Tk()
root.title("Bitcoin Price Prediction")

tk.Button(root, text="Train Model", command=train_interface).grid(row=0, column=0, padx=10, pady=10)
tk.Button(root, text="Bitcoin Predictions", command=prediction_interface).grid(row=0, column=1, padx=10, pady=10)

root.mainloop()
